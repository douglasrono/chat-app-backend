{"version":3,"sources":["../../../src/database/models/queries.js"],"names":["dotenv","config","Model","table","columns","clause","values","query","pool","rows","id","Pool","connectionString","process","env","NODE_ENV","DATABASE_URL_TEST","DATABASE_URL","DATABASE_URL_DEV","ssl","rejectUnauthorized","on","err","client","console","log","selector"],"mappings":"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","sourcesContent":["import dotenv from 'dotenv';\nimport { Pool } from 'pg';\n\ndotenv.config();\nclass Model {\n  constructor(table) {\n    this.table = table;\n\n    this.pool = new Pool({\n      connectionString: process.env.NODE_ENV===\"testing\"?process.env.DATABASE_URL_TEST :process.env.NODE_ENV===\"production\"?process.env.DATABASE_URL:process.env.DATABASE_URL_DEV,\n      ssl:{\n        rejectUnauthorized:false\n      }\n    });\n\n    this.pool.on('error', (err, client) => {\n      console.log('freeMentors-db-error: ', err);\n    });\n  }\n\n\n  // CRUD - READ Operation\n   select = async (columns, clause, values) => {\n     try {\n       let query;\n       if (clause) {\n         query = `SELECT ${columns} FROM ${this.table} WHERE ${clause}`;\n       } else {\n         query = `SELECT ${columns} FROM ${this.table}`;\n       }\n       const { rows } = await this.pool.query(query, values);\n       return rows;\n     } catch (err) {\n       throw err;\n     }\n   }\n\n   selectMessages = async (id) => {\n     try {\n       let query= `SELECT * FROM messages WHERE senderId=${id} OR receiverId=${id}`;\n       const { rows } = await this.pool.query(query);\n       return rows;\n      } catch (err) {\n\n      throw err;\n    }\n  }\n\n   // CRUD - CREATE Operation\n   async insert(columns, selector, values) {\n     const query = `INSERT INTO ${this.table} (${columns}) VALUES (${selector}) returning *`;\n     try {\n       // console.log(query);\n       const { rows } = await this.pool.query(query, values);\n       return rows;\n     } catch (err) {\n       throw err;\n     }\n   }\n\n   // CRUD - UPDATE Operation\n   async update(columns, clause, values) {\n     const query = `UPDATE ${this.table} SET ${columns} WHERE ${clause} returning *`;\n     try {\n       const { rows } = await this.pool.query(query, values);\n       return rows[0];\n     } catch (err) {\n       throw err;\n     }\n   }\n\n   // CRUD - DELETE Operation\n   async delete(clause, values) {\n     const query = `DELETE FROM ${this.table} WHERE ${clause} returning *`;\n     try {\n       const { rows } = await this.pool.query(query, values);\n       return rows[0];\n     } catch (err) {\n       throw err;\n     }\n   }\n}\n\nexport default Model;"],"file":"queries.js"}