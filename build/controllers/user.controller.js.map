{"version":3,"sources":["../../src/controllers/user.controller.js"],"names":["UserController","Model","req","res","body","userName","email","password","hashedPassword","model","select","user","writeHead","end","JSON","stringify","error","status","cols","sels","insert","row","token","id","data","message","username"],"mappings":"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","sourcesContent":["import EncryptPassword from \"../helpers/Encryptor\";\nimport comparePassword from \"../helpers/Decryptor\";\nimport GenerateToken from \"../helpers/token\";\nimport Model from \"../database/models/queries\";\nclass UserController {\n  static model() {\n    return new Model(\"users\");\n  }\n\n  static async createUser(req, res) {\n    try {\n      const { userName, email, password } = req.body;\n      const hashedPassword = EncryptPassword(password);\n      const user = await this.model().select(\"*\", \"email=$1\", [email]);\n      \n      if (user[0]) {\n        res.writeHead(409, { \"Content-Type\": \"application/json\" });\n        res.end(\n          JSON.stringify({\n            error: `User with this email already exist`,\n            status: 409,\n          })\n        );\n      } else {\n        const cols = \"userName, email,password\";\n        const sels = `'${userName}', '${email}', '${hashedPassword}'`;\n\n        let row = await this.model().insert(cols, sels);\n        const user = await this.model().select(\"*\", \"email=$1\", [email]);\n        const token = GenerateToken({\n          userName,\n          email,\n          id:user[0].id\n        });\n        const data = {\n          userName:user[0].userName,\n          email:user[0].email,\n          token,\n        };\n\n        res.writeHead(201, { \"Content-Type\": \"application/json\" });\n        res.end(\n          JSON.stringify({ message: \"User was created succesfully\", data })\n        );\n      }\n    } catch (error) {\n      res.writeHead(500, { \"Content-Type\": \"application/json\" });\n      res.end(JSON.stringify({ error: error }));\n    }\n  }\n\n  static async userLogin(req, res) {\n    try {\n      const { email, password } = req.body;\n      const user = await this.model().select(\"*\", \"email=$1\", [email]);\n      if (user[0]) {\n        if (!comparePassword(password, user[0].password)) {\n          res.writeHead(401, { \"Content-Type\": \"application/json\" });\n          res.end(\n            JSON.stringify({\n              error: `Email or password does not match`,\n              status: 401,\n            })\n          );\n        } else {\n          const token = GenerateToken({\n            userName: user[0].username,\n            email: user[0].email,\n            id:user[0].id\n          });\n          const data = {\n            userName: user[0].userName,\n            email: user[0].email,\n            token,\n          };\n\n          res.writeHead(200, { \"Content-Type\": \"application/json\" });\n          res.end(\n            JSON.stringify({ message: \"User was logged in succesfully\", data })\n          );\n        }\n      } else {\n        res.writeHead(404, { \"Content-Type\": \"application/json\" });\n        res.end(\n          JSON.stringify({\n            error: `User with this account does not exist`,\n            status: 404,\n          })\n        );\n      } \n    } catch (error) {\n      res.writeHead(500, { \"Content-Type\": \"application/json\" });\n      res.end(JSON.stringify({ error: error }));\n    }\n  }\n}\n\nexport default UserController;\n"],"file":"user.controller.js"}