{"version":3,"sources":["../../src/controllers/messages.controller.js"],"names":["MessageController","Model","req","res","token","headers","undefined","writeHead","end","JSON","stringify","error","status","verifyTokens","verifyAllTokens","user","id","model","selectMessages","messages","messageDatas","map","data","receivername","found","filter","datas","length","filtedMessages","push","message"],"mappings":";;;;;;;;;;;;;;;;;AAAA;;AACA;;IACMA,iB;;;;;;;WACJ,iBAAe;AACb,aAAO,IAAIC,mBAAJ,CAAU,UAAV,CAAP;AACD;;;;uGAED,iBAAyBC,GAAzB,EAA8BC,GAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEYC,gBAAAA,KAFZ,GAEsBF,GAAG,CAACG,OAF1B,CAEYD,KAFZ;;AAAA,sBAGQA,KAAK,KAAKE,SAAV,IAAuBF,KAAK,KAAK,IAAjC,IAAyCA,KAAK,KAAK,EAH3D;AAAA;AAAA;AAAA;;AAIMD,gBAAAA,GAAG,CAACI,SAAJ,CAAc,GAAd,EAAmB;AAAE,kCAAgB;AAAlB,iBAAnB;AACAJ,gBAAAA,GAAG,CAACK,GAAJ,CACEC,IAAI,CAACC,SAAL,CAAe;AACbC,kBAAAA,KAAK,8BADQ;AAEbC,kBAAAA,MAAM,EAAE;AAFK,iBAAf,CADF;AALN;AAAA;;AAAA;AAAA;AAAA,uBAYyBC,mBAAaC,eAAb,CAA6BV,KAA7B,CAZzB;;AAAA;AAYYW,gBAAAA,IAZZ;AAaYC,gBAAAA,EAbZ,GAaiBD,IAAI,CAACC,EAbtB;AAAA;AAAA,uBAc6B,KAAKC,KAAL,GAAaC,cAAb,CAA4BF,EAA5B,CAd7B;;AAAA;AAcYG,gBAAAA,QAdZ;AAeYC,gBAAAA,YAfZ,GAe2B,EAf3B;AAgBMD,gBAAAA,QAAQ,CAACE,GAAT,CAAa,UAACC,IAAD,EAAU;AAAA,sBACbC,YADa,GACID,IADJ,CACbC,YADa;AAGrB,sBAAMC,KAAK,GAAGJ,YAAY,CAACK,MAAb,CAAoB,UAACH,IAAD;AAAA,2BAChCA,IAAI,CAACG,MAAL,CAAY,UAACC,KAAD;AAAA,6BAAWA,KAAK,CAACH,YAAN,KAAuBA,YAAlC;AAAA,qBAAZ,CADgC;AAAA,mBAApB,CAAd;;AAGA,sBAAIC,KAAK,CAACG,MAAN,KAAiB,CAArB,EAAwB;AACtB,wBAAMC,cAAc,GAAGT,QAAQ,CAACM,MAAT,CACrB,UAACH,IAAD;AAAA,6BAAUA,IAAI,CAACC,YAAL,KAAsBA,YAAhC;AAAA,qBADqB,CAAvB;AAGAH,oBAAAA,YAAY,CAACS,IAAb,CAAkBD,cAAlB;AACD;AACF,iBAZD;AAeAzB,gBAAAA,GAAG,CAACI,SAAJ,CAAc,GAAd,EAAmB;AAAE,kCAAgB;AAAlB,iBAAnB;AACAJ,gBAAAA,GAAG,CAACK,GAAJ,CACEC,IAAI,CAACC,SAAL,CAAe;AACboB,kBAAAA,OAAO,EAAE,uCADI;AAEbV,kBAAAA,YAAY,EAAC,CAACD,QAAD;AAFA,iBAAf,CADF;;AAhCN;AAAA;AAAA;;AAAA;AAAA;AAAA;AAwCIhB,gBAAAA,GAAG,CAACI,SAAJ,CAAc,GAAd,EAAmB;AAAE,kCAAgB;AAAlB,iBAAnB;AACAJ,gBAAAA,GAAG,CAACK,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAe;AAAEC,kBAAAA,KAAK;AAAP,iBAAf,CAAR;;AAzCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;;eA8CaX,iB","sourcesContent":["import Model from \"../database/models/queries\";\nimport verifyTokens from \"../helpers/verify.token\";\nclass MessageController {\n  static model() {\n    return new Model(\"messages\");\n  }\n\n  static async getMessages(req, res) {\n    try {\n      const { token } = req.headers;\n      if (token === undefined || token === null || token === \"\") {\n        res.writeHead(400, { \"Content-Type\": \"application/json\" });\n        res.end(\n          JSON.stringify({\n            error: `Please provide token first`,\n            status: 400,\n          })\n        );\n      } else {\n        const user = await verifyTokens.verifyAllTokens(token);\n        const id = user.id;\n        const messages = await this.model().selectMessages(id);\n        const messageDatas = [];\n        messages.map((data) => {\n          const { receivername } = data;\n         \n          const found = messageDatas.filter((data) =>\n            data.filter((datas) => datas.receivername === receivername)\n          );\n          if (found.length === 0) {\n            const filtedMessages = messages.filter(\n              (data) => data.receivername === receivername\n            );\n            messageDatas.push(filtedMessages);\n          }\n        });\n\n\n        res.writeHead(200, { \"Content-Type\": \"application/json\" });\n        res.end(\n          JSON.stringify({\n            message: \"Messages was retrieved in succesfully\",\n            messageDatas:[messages],\n          })\n        );\n      }\n    } catch (error) {\n      res.writeHead(500, { \"Content-Type\": \"application/json\" });\n      res.end(JSON.stringify({ error: error }));\n    }\n  }\n}\n\nexport default MessageController;\n"],"file":"messages.controller.js"}