{"version":3,"sources":["../../src/tests/bbbmessages.js"],"names":["app","require","expect","chai","use","chaiHttp","should","token","email","userName","id","invalidToken","isVerified","describe","it","done","request","get","set","end","err","res","body","to","be","an","message","equal","status","error"],"mappings":";;;;AAAA;;AACA;;AAGA;;AACA;;AACA;;AAJA,IAAMA,GAAG,GAAGC,OAAO,CAAC,WAAD,CAAnB,C,CACA;;;IAKQC,M,GAAWC,gB,CAAXD,M;;AACRC,iBAAKC,GAAL,CAASC,oBAAT;;AACAF,iBAAKG,MAAL;;AAEA,IAAMC,KAAK,GAAG,uBAAc;AAC1BC,EAAAA,KAAK,EAAE,oBADmB;AAE1BC,EAAAA,QAAQ,EAAE,MAFgB;AAG1BC,EAAAA,EAAE,EAAE;AAHsB,CAAd,CAAd;AAMA,IAAMC,YAAY,GAAG,uBAAc;AACjCH,EAAAA,KAAK,EAAE,mBAD0B;AAEjCI,EAAAA,UAAU,EAAE,OAFqB;AAGjCF,EAAAA,EAAE,EAAE;AAH6B,CAAd,CAArB;AAMAG,QAAQ,CAAC,gBAAD,EAAmB,YAAM;AAE/BC,EAAAA,EAAE,CAAC,8BAAD,EAAiC,UAACC,IAAD,EAAU;AAC3CZ,qBACGa,OADH,CACWhB,GADX,EAEGiB,GAFH,CAEO,eAFP,EAGGC,GAHH,CAGO,OAHP,YAGmBX,KAHnB,GAIGY,GAJH,CAIO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBnB,MAAAA,MAAM,CAACmB,GAAG,CAACC,IAAL,CAAN,CAAiBC,EAAjB,CAAoBC,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvB,MAAAA,MAAM,CAACmB,GAAG,CAACC,IAAJ,CAASI,OAAV,CAAN,CAAyBH,EAAzB,CAA4BI,KAA5B,CAAkC,uCAAlC;AACAzB,MAAAA,MAAM,CAACmB,GAAG,CAACO,MAAL,CAAN,CAAmBL,EAAnB,CAAsBI,KAAtB,CAA4B,GAA5B;AACAZ,MAAAA,IAAI;AACL,KATH;AAUD,GAXC,CAAF;AAYAD,EAAAA,EAAE,CAAC,mDAAD,EAAsD,UAACC,IAAD,EAAU;AAChEZ,qBACGa,OADH,CACWhB,GADX,EAEGiB,GAFH,CAEO,eAFP,EAGGC,GAHH,CAGO,OAHP,EAGgB,EAHhB,EAIGC,GAJH,CAIO,UAACC,GAAD,EAAMC,GAAN,EAAc;AACjBnB,MAAAA,MAAM,CAACmB,GAAG,CAACC,IAAL,CAAN,CAAiBC,EAAjB,CAAoBC,EAApB,CAAuBC,EAAvB,CAA0B,QAA1B;AACAvB,MAAAA,MAAM,CAACmB,GAAG,CAACC,IAAJ,CAASO,KAAV,CAAN,CAAuBN,EAAvB,CAA0BI,KAA1B,CAAgC,4BAAhC;AACAzB,MAAAA,MAAM,CAACmB,GAAG,CAACC,IAAJ,CAASM,MAAV,CAAN,CAAwBL,EAAxB,CAA2BI,KAA3B,CAAiC,GAAjC;AACAZ,MAAAA,IAAI;AACL,KATH;AAUD,GAXC,CAAF;AAaD,CA3BO,CAAR","sourcesContent":["import chai from \"chai\";\nimport chaiHttp from \"chai-http\";\nconst app = require(\"../server\");\n// import db from '../database/models';\nimport GenerateToken from \"../helpers/token\";\nimport EncryptPassword from \"../helpers/Encryptor\";\nimport mockData from \"./mock/mockData\";\n\nconst { expect } = chai;\nchai.use(chaiHttp);\nchai.should();\n\nconst token = GenerateToken({\n  email: \"mujohn27@gmail.com\",\n  userName: \"John\",\n  id: \"4\",\n});\n\nconst invalidToken = GenerateToken({\n  email: \"invalid@gmail.com\",\n  isVerified: \"false\",\n  id: \"4\",\n});\n\ndescribe(\"Messages tests\", () => {\n\n  it(\"user should get all messages\", (done) => {\n    chai\n      .request(app)\n      .get(\"/api/messages\")\n      .set('token', `${token}`)\n      .end((err, res) => {\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body.message).to.equal(\"Messages was retrieved in succesfully\");\n        expect(res.status).to.equal(200);\n        done();\n      });\n  });\n  it(\"It should prompt error when token is not provided\", (done) => {\n    chai\n      .request(app)\n      .get(\"/api/messages\")\n      .set('token', '')\n      .end((err, res) => {\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body.error).to.equal(\"Please provide token first\");\n        expect(res.body.status).to.equal(400);\n        done();\n      });\n  });\n\n});\n"],"file":"bbbmessages.js"}