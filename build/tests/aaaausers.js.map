{"version":3,"sources":["../../src/tests/aaaausers.js"],"names":["app","require","expect","chai","use","chaiHttp","should","token","email","isVerified","id","token2","invalidToken","describe","it","done","request","get","end","err","res","have","status","post","send","mockData","body","to","be","an","message","equal","error"],"mappings":"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","sourcesContent":["import chai from \"chai\";\nimport chaiHttp from \"chai-http\";\nconst app = require(\"../server\");\n// import db from '../database/models';\nimport GenerateToken from \"../helpers/token\";\nimport EncryptPassword from \"../helpers/Encryptor\";\nimport mockData from \"./mock/mockData\";\n\nconst { expect } = chai;\nchai.use(chaiHttp);\nchai.should();\n\nconst token = GenerateToken({\n  email: \"shema@gmail.com\",\n  isVerified: \"false\",\n  id: \"4\",\n});\nconst token2 = GenerateToken({\n  email: \"shemaeric@gmail.com\",\n  isVerified: \"false\",\n  id: \"4\",\n});\nconst invalidToken = GenerateToken({\n  email: \"invalid@gmail.com\",\n  isVerified: \"false\",\n  id: \"4\",\n});\n\ndescribe(\"Users tests\", () => {\n  it(\"it should return error if route does not exist\", (done) => {\n    chai\n      .request(app)\n      .get(\"/\")\n      .end((err, res) => {\n        res.should.have.status(404);\n        done();\n      });\n  });\n  it(\"should create a user\", (done) => {\n    chai\n      .request(app)\n      .post(\"/api/auth/signup\")\n      .send(mockData[0])\n      .end((err, res) => {\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body.message).to.equal(\"User was created succesfully\");\n        expect(res.status).to.equal(201);\n        done();\n      });\n  });\n\n  it(\"should not create an existing user\", (done) => {\n    chai\n      .request(app)\n      .post(\"/api/auth/signup\")\n      .send(mockData[0])\n      .end((err, res) => {\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body.error).to.equal(\"User with this email already exist\");\n        expect(res.body.status).to.equal(409);\n\n        done();\n      });\n  });\n  it(\"should be able to login\", (done) => {\n    chai\n      .request(app)\n      .post(\"/api/auth/login\")\n      .send(mockData[1])\n      .end((err, res) => {\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body.message).to.equal(\"User was logged in succesfully\");\n        expect(res.status).to.equal(200);\n        done();\n      });\n  });\n\n  it(\"should not be able to login when email or password is wrong\", (done) => {\n    chai\n      .request(app)\n      .post(\"/api/auth/login\")\n      .send(mockData[2])\n      .end((err, res) => {\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body.error).to.equal(\"Email or password does not match\");\n        expect(res.body.status).to.equal(401);\n        done();\n      });\n  });\n\n  it(\"should not be able to login when email account does not exist\", (done) => {\n    chai\n      .request(app)\n      .post(\"/api/auth/login\")\n      .send(mockData[3])\n      .end((err, res) => {\n        expect(res.body).to.be.an(\"object\");\n        expect(res.body.error).to.equal(\n          \"User with this account does not exist\"\n        );\n        expect(res.body.status).to.equal(404);\n        done();\n      });\n  });\n});\n"],"file":"aaaausers.js"}